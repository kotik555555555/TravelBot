import json

import aiofiles
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext

from handlers.reply_handlers import data
from keyboards.inline_keyboards import get_inline_keyboard1, get_sorting_keyboard
from keyboards.reply_keyboards import show_main_menu
from aiogram.fsm.state import State, StatesGroup

router = Router()
bookings = {}

class BookingState(StatesGroup):
    waiting_for_city = State()     # –û—á—ñ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞
    waiting_for_offer = State()

# Callback handler for price sorting buttons
def find_city(city_name):
    city_name = city_name.strip().lower()
    for city in data.get("cities", []):
        if city["name"].strip().lower() == city_name:
            print(f"‚úÖ –ú—ñ—Å—Ç–æ –∑–Ω–∞–π–¥–µ–Ω–æ: {city['name']}")
            return city
    print("‚ö† –ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–ø–∏—Å–∫—É!")
    return None



@router.callback_query(lambda c: c.data in ["btn_asc", "btn_desc", "btn_back"])
async def sort_callback(callback_query: types.CallbackQuery):
    sort_order = callback_query.data

    if sort_order == "btn_back":
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await callback_query.message.answer("üîô –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é.")
        await show_main_menu(callback_query.message)
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
    all_offers = [
        (city.get("name"), offer.get("title"), offer.get("price"), offer.get("description"), offer.get("image"))
        for city in data.get("cities", []) if isinstance(city, dict)
        for offer in city.get("offers", []) if isinstance(offer, dict)
    ]

    # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Ü—ñ–Ω–æ—é (–ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —á–∏—Å–ª–æ)
    reverse_order = sort_order == "btn_desc"
    all_offers.sort(key=lambda x: float(x[2]) if str(x[2]).replace('.', '', 1).isdigit() else 0, reverse=reverse_order)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
    for city_name, title, price, description, image in all_offers:
        response_text = (
            f"üìç *{city_name}: {title}*\n"
            f"üí∞ *–¶—ñ–Ω–∞:* {price} –≥—Ä–Ω\n"
            f"üìñ {description}"
        )
        if image:
            await callback_query.message.answer_photo(photo=image, caption=response_text, parse_mode="Markdown")
        else:
            await callback_query.message.answer(response_text, parse_mode="Markdown")

    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–±—ñ—Ä —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É
    await callback_query.message.answer("üìä –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=get_inline_keyboard1())


async def load_city_data():
    try:
        async with aiofiles.open("data.json", "r", encoding="utf-8") as file:
            content = await file.read()
        print("DEBUG: Successfully loaded city data.")  # Debug log
        return json.loads(content)
    except FileNotFoundError:
        raise FileNotFoundError("–§–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª.")
    except json.JSONDecodeError:
        raise ValueError("–ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–∞–π–ª—É JSON. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –π–æ–≥–æ.")
    except Exception as e:
        raise Exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {str(e)}")

# Handler for city input
@router.message(BookingState.waiting_for_city, F.text)
async def handle_city_name(message: types.Message, state: FSMContext):
    city_name = message.text.strip()

    if not city_name:
        await message.answer("‚ö† –í–∏ –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    print(f"DEBUG: –í–≤–µ–¥–µ–Ω–∞ –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞: {city_name}")

    try:
        city_data = await load_city_data()
        cities = city_data.get("cities", [])

        if not isinstance(cities, list):
            raise ValueError("–û—á—ñ–∫—É–≤–∞–≤—Å—è —Å–ø–∏—Å–æ–∫ –º—ñ—Å—Ç —É –∫–ª—é—á—ñ 'cities'")

        # Search for the city
        city = next((c for c in cities if c.get("name").lower() == city_name.lower()), None)

        if city:
            response = (
                f"üèô –ú—ñ—Å—Ç–æ: {city['name']}\n"
                f"üá∫üá¶ –ö—Ä–∞—ó–Ω–∞: {city['country']}\n\n"
                f"üí∞ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:\n"
            )
            await message.answer(response)

            # Send offers
            for offer in city.get("offers", []):
                offer_response = f"- {offer['title']} ({offer['price']} –≥—Ä–Ω)\n  {offer['description']}\n"
                if "image" in offer:
                    await message.answer_photo(offer['image'], caption=offer_response)
                else:
                    await message.answer(offer_response)

    except (FileNotFoundError, json.JSONDecodeError, ValueError, Exception) as e:
        await message.answer(f"‚ö† –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        print(f"[ERROR] {e}")

# Handler for the city selection callback
@router.callback_query(lambda c: c.data == "btn_2.1")
async def city_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    print(f"DEBUG: callback_query.data = {callback_query.data}")  # Debug log
    await state.set_state(BookingState.waiting_for_city)  # Set the state to wait for city name input
    await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:")

# Handler for the back button callback
@router.callback_query(lambda c: c.data == "btn_2.2")
async def back_to_main_menu(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...")
    await show_main_menu(callback_query.message)

# Handler for offer selection input
@router.message(BookingState.waiting_for_offer)
async def handle_offer_name(message: types.Message, state: FSMContext):
    offer_name = message.text.strip().lower()
    print(f"DEBUG: –í–≤–µ–¥–µ–Ω–∞ –Ω–∞–∑–≤–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó: {offer_name}")

    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –º—ñ—Å—Ç–∞ —Ç–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
        city_data = await load_city_data()
        found_offer, found_city = None, None

        # –ü–æ—à—É–∫ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø–æ –Ω–∞–∑–≤—ñ
        for city in city_data.get("cities", []):
            for offer in city.get("offers", []):
                if offer["title"].lower() == offer_name:
                    found_offer, found_city = offer, city["name"]
                    break
            if found_offer:
                break

        if found_offer:
            # –û—Ç—Ä–∏–º—É—î–º–æ URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ JSON
            image_url = found_offer.get("image", None)

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –∞–±–æ –±–µ–∑
            await send_offer_message(message, found_offer, found_city, image_url)

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            await state.update_data(selected_city=found_city, selected_offer=found_offer["title"])

        else:
            await message.answer("‚ö† –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    except Exception as e:
        print(f"[ERROR] {e}")
        await message.answer("‚ö† –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


async def send_offer_message(message, offer, city, image_url):
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é, –º–æ–∂–µ –≤–∫–ª—é—á–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
    """
    offer_details = (
        f"‚úÖ –í–∏ –∑–∞–±—Ä–æ–Ω—é–≤–∞–ª–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é: {offer['title']}\n\n"
        f"üìç –ú—ñ—Å—Ç–æ: {city}\nüé≠ –ù–∞–∑–≤–∞: {offer['title']}\n"
        f"üí∞ –¶—ñ–Ω–∞: {offer['price']} –≥—Ä–Ω\nüìú –û–ø–∏—Å: {offer['description']}"
    )

    if image_url:
        await message.answer_photo(
            photo=image_url,
            caption=offer_details
        )
    else:
        await message.answer(offer_details)

@router.callback_query(lambda c: c.data.startswith("btn_3."))
async def city_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == "btn_3.1":
        await callback_query.message.answer("üìù –û–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: (–ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –∑–∞ –Ω–∞–∑–≤–æ—é)")
        await state.set_state(BookingState.waiting_for_offer)
    elif data == "btn_3.2":
        await callback_query.message.answer("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...")
        await show_main_menu(callback_query.message)


@router.callback_query(lambda c: c.data.startswith("btn_4."))
async def city_callback_handler(callback_query: types.CallbackQuery):
    dis_data = callback_query.data  # Callback data (e.g., "btn_4.1")

    if dis_data == "btn_4.1":
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—É—Ä–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é
        offers = [
            offer
            for city in data.get("cities", [])
            if isinstance(city, dict)
            for offer in city.get("offers", [])
            if isinstance(offer, dict) and "discount" in offer
        ]
    elif dis_data == "btn_4.2":
        # –í—Å—ñ —Ç—É—Ä–∏ –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        offers = [
            offer
            for city in data.get("cities", [])
            if isinstance(city, dict)
            for offer in city.get("offers", [])
            if isinstance(offer, dict)
        ]
    else:
        return

    if offers:
        # –í–∏–±—ñ—Ä —Å–ø–æ—Å–æ–±—É —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        await callback_query.message.answer("üîΩ –í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=get_sorting_keyboard())
    else:
        await callback_query.message.answer("üî∏ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–∫—Ü—ñ–π.")
        return


@router.callback_query(lambda c: c.data.startswith("sort_"))
async def sort_callback(callback_query: types.CallbackQuery):
    if callback_query.data == "sort_back":
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        await callback_query.message.answer("üîô –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é.")
        await show_main_menu(callback_query.message)
        return

    sort_order = callback_query.data.split("_")[1]  # sort_asc –∞–±–æ sort_desc

    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç—ñ–ª—å–∫–∏ –∑ –∑–Ω–∏–∂–∫–∞–º–∏
    offers_with_discount = [
        offer
        for city in data.get("cities", [])
        if isinstance(city, dict)
        for offer in city.get("offers", [])
        if isinstance(offer, dict) and "discount" in offer
    ]

    if not offers_with_discount:
        await callback_query.message.answer("üî∏ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–∫—Ü—ñ–π.")
        return

    # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑–∞ —Ü—ñ–Ω–æ—é
    reverse_order = sort_order == "desc"
    offers_with_discount.sort(key=lambda x: float(x["price"]) if str(x["price"]).replace('.', '', 1).isdigit() else 0, reverse=reverse_order)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
    for offer in offers_with_discount:
        city_name = offer.get("city", "–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ")
        title = offer.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
        price = offer.get("price", "–ù–µ –≤–∫–∞–∑–∞–Ω–∞ —Ü—ñ–Ω–∞")
        description = offer.get("description", "–ë–µ–∑ –æ–ø–∏—Å—É")
        image = offer.get("image", None)

        response_text = (
            f"üìç *{city_name}: {title}*\n"
            f"üí∞ *–¶—ñ–Ω–∞:* {price} –≥—Ä–Ω\n"
            f"üéâ *–ó–Ω–∏–∂–∫–∞:* {offer.get('discount', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}%\n"
            f"üìñ {description}"
        )

        if image:
            await callback_query.message.answer_photo(photo=image, caption=response_text, parse_mode="Markdown", reply_markup=get_sorting_keyboard())
        else:
            await callback_query.message.answer(response_text, parse_mode="Markdown", reply_markup=get_sorting_keyboard())



@router.callback_query(lambda c:  c.data.startswith("btn_5."))
async def city_callback_handler(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "btn_5.1":
        await callback_query.message.answer("üìö –í–ò–ö–û–ù–ê–í –†–û–ë–û–¢–£ –£–ß–ï–ù–¨ –ì–†–£–ü–ò –ü41 –ë–£–î–ù–ò–ô –ú–ê–¢–í–Ü–ô. üéì")
    elif data == "btn_5.2":
        await callback_query.message.answer("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é... üè†")
        await show_main_menu(callback_query.message)
