# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –º–æ–¥—É–ª—ñ
import json
import aiofiles
import aiogram
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from urllib.parse import urlparse
import html

# –Ü–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –º–æ–¥—É–ª—ñ–≤
from handlers.reply_handlers import data
from keyboards.inline_keyboards import get_inline_keyboard, get_sorting_keyboard
from keyboards.reply_keyboards import show_main_menu
from aiogram.fsm.state import State, StatesGroup

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
router = Router()
bookings = {}  # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω—å

# –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω–∏ FSM
class BookingState(StatesGroup):
    waiting_for_city = State()     # –û—á—ñ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞
    waiting_for_offer = State()    # –û—á—ñ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó

# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –º—ñ—Å—Ç–∞ –∑–∞ –Ω–∞–∑–≤–æ—é
def find_city(city_name):
    city_name = city_name.strip().lower()
    for city in data.get("cities", []):
        if city["name"].strip().lower() == city_name:
            print(f"‚úÖ –ú—ñ—Å—Ç–æ –∑–Ω–∞–π–¥–µ–Ω–æ: {city['name']}")
            return city
    print("‚ö† –ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–ø–∏—Å–∫—É!")
    return None

# –û–±—Ä–æ–±–Ω–∏–∫ callback'—ñ–≤ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Ü—ñ–Ω–æ—é
@router.callback_query(lambda c: c.data in ["btn_asc", "btn_desc", "btn_back"])
async def sort_callback(callback_query: types.CallbackQuery):
    if callback_query.data == "btn_back":
        await show_main_menu(callback_query.message)
        return

    sort_order = callback_query.data.split("_")[1]  # 'asc' –∞–±–æ 'desc'

    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∑ —É—Å—ñ—Ö –º—ñ—Å—Ç
    all_offers = []
    for city in data.get("cities", []):
        if isinstance(city, dict):
            city_name = city.get("name", "–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ")
            for offer in city.get("offers", []):
                if isinstance(offer, dict):
                    offer["city"] = city_name
                    all_offers.append(offer)

    if not all_offers:
        await callback_query.message.answer("üî∏ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π.", reply_markup=get_inline_keyboard())
        return

    # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Ü—ñ–Ω–æ—é
    reverse_order = sort_order == "desc"
    all_offers.sort(
        key=lambda x: float(x["price"]) if str(x["price"]).replace('.', '', 1).isdigit() else 0,
        reverse=reverse_order
    )

    # –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ URL
    def is_valid_url(url):
        try:
            result = urlparse(url)
            return all([result.scheme in ('http', 'https'), result.netloc])
        except:
            return False

    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
    messages = []
    current_block = ""

    for offer in all_offers:
        city_name = html.escape(offer.get("city", "–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ"))
        title = html.escape(offer.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∏"))
        price = html.escape(str(offer.get("price", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")))
        description = html.escape(offer.get("description", "–ë–µ–∑ –æ–ø–∏—Å—É"))
        image = offer.get("image")

        offer_text = (
            f"<b>üìç {city_name}: {title}</b>\n"
            f"<b>üí∞ –¶—ñ–Ω–∞:</b> {price} –≥—Ä–Ω\n"
            f"<b>üìñ –û–ø–∏—Å:</b> {description}\n"
        )

        if image and is_valid_url(image):
            offer_text += f"<a href=\"{html.escape(image, quote=True)}\">üñºÔ∏è –§–æ—Ç–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó</a>\n"

        offer_text += "\n\n"

        if len(current_block) + len(offer_text) <= 4096:
            current_block += offer_text
        else:
            messages.append(current_block.strip())
            current_block = offer_text

    if current_block:
        messages.append(current_block.strip())

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω—ñ –±–ª–æ–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    for msg in messages:
        try:
            await callback_query.message.answer(msg, parse_mode="HTML", disable_web_page_preview=False)
        except aiogram.exceptions.TelegramBadRequest as e:
            await callback_query.message.answer(
                f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞:\n<code>{html.escape(str(e))}</code>",
                parse_mode="HTML"
            )

    await callback_query.message.answer("üìä –í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=get_inline_keyboard())

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON-–¥–∞–Ω–∏—Ö –º—ñ—Å—Ç
async def load_city_data():
    try:
        async with aiofiles.open("data.json", "r", encoding="utf-8") as file:
            content = await file.read()
        print("DEBUG: Successfully loaded city data.")
        return json.loads(content)
    except FileNotFoundError:
        raise FileNotFoundError("‚ö† –§–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª.")
    except json.JSONDecodeError:
        raise ValueError("‚ùó –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–∞–π–ª—É JSON. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –π–æ–≥–æ.")
    except Exception as e:
        raise Exception(f"‚ö† –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {str(e)}")

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞
@router.message(BookingState.waiting_for_city, F.text)
async def handle_city_name(message: types.Message, state: FSMContext):
    city_name = message.text.strip()

    if not city_name:
        await message.answer("‚ö† –í–∏ –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    print(f"DEBUG: –í–≤–µ–¥–µ–Ω–∞ –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞: {city_name}")

    try:
        city_data = await load_city_data()
        cities = city_data.get("cities", [])

        if not isinstance(cities, list):
            raise ValueError("‚ùó –û—á—ñ–∫—É–≤–∞–≤—Å—è —Å–ø–∏—Å–æ–∫ –º—ñ—Å—Ç —É –∫–ª—é—á—ñ 'cities'")

        city = next((c for c in cities if c.get("name").lower() == city_name.lower()), None)

        if city:
            response = (
                f"üèô <b>–ú—ñ—Å—Ç–æ:</b> {html.escape(city['name'])}\n"
                f"üá∫üá¶ <b>–ö—Ä–∞—ó–Ω–∞:</b> {html.escape(city['country'])}\n\n"
                f"üí∞ <b>–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:</b>\n\n"
            )

            offers = city.get("offers", [])
            if offers:
                for offer in offers:
                    title = html.escape(offer.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∏"))
                    price = html.escape(str(offer.get("price", "–ù–µ–≤—ñ–¥–æ–º–æ")))
                    description = html.escape(offer.get("description", "–ë–µ–∑ –æ–ø–∏—Å—É"))
                    image = offer.get("image")

                    offer_text = (
                        f"üîπ <b>{title}</b>\n"
                        f"üíµ <b>–¶—ñ–Ω–∞:</b> {price} –≥—Ä–Ω\n"
                        f"üìñ {description}\n"
                    )

                    if image:
                        offer_text += f'<a href="{html.escape(image, quote=True)}">üñºÔ∏è –§–æ—Ç–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó</a>\n'

                    response += offer_text + "\n"
            else:
                response += "‚ùå –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π.\n"

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —É —á–∞—Å—Ç–∏–Ω–∞—Ö, —è–∫—â–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç —Å–∏–º–≤–æ–ª—ñ–≤
            if len(response) <= 4096:
                await message.answer(response.strip(), parse_mode="HTML", disable_web_page_preview=False)
            else:
                chunks = []
                current = ""
                for block in response.split("\n\n"):
                    if len(current) + len(block) + 2 <= 4096:
                        current += block + "\n\n"
                    else:
                        chunks.append(current.strip())
                        current = block + "\n\n"
                if current:
                    chunks.append(current.strip())

                for part in chunks:
                    await message.answer(part, parse_mode="HTML", disable_web_page_preview=False)

        else:
            await message.answer("‚ö† –ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

    except (FileNotFoundError, json.JSONDecodeError, ValueError, Exception) as e:
        await message.answer(f"‚ö† –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        print(f"[ERROR] {e}")



# –û–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—É –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –º—ñ—Å—Ç–∞
@router.callback_query(lambda c: c.data == "btn_2.1")
async def city_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    print(f"DEBUG: callback_query.data = {callback_query.data}")  # –í–∏–≤–µ–¥–µ–Ω–Ω—è debug-—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    await state.set_state(BookingState.waiting_for_city)  # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞
    await callback_query.message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:")

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(lambda c: c.data == "btn_2.2")
async def back_to_main_menu(callback_query: types.CallbackQuery):
    await show_main_menu(callback_query.message)  # –ü–æ–∫–∞–∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
@router.message(BookingState.waiting_for_offer)
async def handle_offer_name(message: types.Message, state: FSMContext):
    offer_name = message.text.strip().lower()
    print(f"DEBUG: –í–≤–µ–¥–µ–Ω–∞ –Ω–∞–∑–≤–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó: {offer_name}")

    try:
        city_data = await load_city_data()  # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON-–¥–∞–Ω–∏—Ö
        found_offer, found_city = None, None

        # –ü–æ—à—É–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Å–µ—Ä–µ–¥ —É—Å—ñ—Ö –º—ñ—Å—Ç
        for city in city_data.get("cities", []):
            for offer in city.get("offers", []):
                if offer["title"].lower() == offer_name:
                    found_offer, found_city = offer, city["name"]
                    break
            if found_offer:
                break

        if found_offer:
            image_url = found_offer.get("image", None)  # URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            await send_offer_message(message, found_offer, found_city, image_url)  # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await state.update_data(selected_city=found_city, selected_offer=found_offer["title"])  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
        else:
            await message.answer("‚ö† –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    except Exception as e:
        print(f"[ERROR] {e}")
        await message.answer("‚ö† –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é
async def send_offer_message(message, offer, city, image_url):
    offer_details = (
        f"‚úÖ <b>–í–∏ –∑–∞–±—Ä–æ–Ω—é–≤–∞–ª–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é</b>: <b>{offer['title']}</b>\n\n"
        f"üìç <b>–ú—ñ—Å—Ç–æ:</b> {city}\n"
        f"üé≠ <b>–ù–∞–∑–≤–∞:</b> {offer['title']}\n"
        f"üí∞ <b>–¶—ñ–Ω–∞:</b> {offer['price']} –≥—Ä–Ω\n"
        f"üìú <b>–û–ø–∏—Å:</b> {offer['description']}"
    )

    if image_url:
        await message.answer_photo(photo=image_url, caption=offer_details, parse_mode="HTML")
    else:
        await message.answer(offer_details, parse_mode="HTML")


# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫, –ø–æ–≤'—è–∑–∞–Ω–∏—Ö –∑ –≤–∏–±–æ—Ä–æ–º –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∞–±–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º
@router.callback_query(lambda c: c.data.startswith("btn_3."))
async def city_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == "btn_3.1":
        await callback_query.message.answer("üìù –û–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: (–ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –∑–∞ –Ω–∞–∑–≤–æ—é)")
        await state.set_state(BookingState.waiting_for_offer)
    elif data == "btn_3.2":
        await show_main_menu(callback_query.message)

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–Ω–∏–∂–æ–∫
@router.callback_query(lambda c: c.data.startswith("btn_4."))
async def city_callback_handler(callback_query: types.CallbackQuery):
    dis_data = callback_query.data

    if dis_data == "btn_4.1":
        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ª–∏—à–µ –∞–∫—Ü—ñ–π–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π
        offers = [
            offer for city in data.get("cities", [])
            if isinstance(city, dict)
            for offer in city.get("offers", [])
            if isinstance(offer, dict) and "discount" in offer
        ]
    elif dis_data == "btn_4.2":
        # –í—Å—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
        offers = [
            offer for city in data.get("cities", [])
            if isinstance(city, dict)
            for offer in city.get("offers", [])
            if isinstance(offer, dict)
        ]
    else:
        return

    if offers:
        await callback_query.message.answer("üîΩ –í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=get_sorting_keyboard())
    else:
        await callback_query.message.answer("üî∏ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–∫—Ü—ñ–π.")
        return

# –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏
@router.callback_query(lambda c: c.data.startswith("sort_"))
async def sort_callback(callback_query: types.CallbackQuery):
    if callback_query.data == "sort_back":
        await show_main_menu(callback_query.message)
        return

    sort_order = callback_query.data.split("_")[1]
    reverse_order = sort_order == "desc"

    offers_with_discount = [
        offer for city in data.get("cities", [])
        if isinstance(city, dict)
        for offer in city.get("offers", [])
        if isinstance(offer, dict) and "discount" in offer
    ]

    if not offers_with_discount:
        await callback_query.message.answer("üî∏ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–∫—Ü—ñ–π.")
        return

    offers_with_discount.sort(
        key=lambda x: float(x["price"]) if str(x["price"]).replace('.', '', 1).isdigit() else 0,
        reverse=reverse_order
    )

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –≤—Å—ñ—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π
    offer_texts = ""
    for offer in offers_with_discount:
        city_name = offer.get("city", "–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ")
        title = offer.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
        price = offer.get("price", "–ù–µ –≤–∫–∞–∑–∞–Ω–∞ —Ü—ñ–Ω–∞")
        description = offer.get("description", "–ë–µ–∑ –æ–ø–∏—Å—É")
        discount = offer.get("discount", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
        image = offer.get("image")

        offer_text = (
            f"üìç *{city_name}: {title}*\n"
            f"üí∞ *–¶—ñ–Ω–∞:* {price} –≥—Ä–Ω\n"
            f"üéâ *–ó–Ω–∏–∂–∫–∞:* {discount}%\n"
            f"üìñ {description}\n"
        )

        if image:
            offer_text += f"üñºÔ∏è [–§–æ—Ç–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó]({image})\n"

        offer_texts += offer_text + "\n\n"

    if offer_texts:
        for i in range(0, len(offer_texts), 4096):  # Telegram –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await callback_query.message.answer(offer_texts[i:i + 4096], parse_mode="Markdown", disable_web_page_preview=False)

        await callback_query.message.answer("üìä –í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=get_sorting_keyboard())
    else:
        await callback_query.message.answer("üî∏ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–∫—Ü—ñ–π.", reply_markup=get_sorting_keyboard())

# –û–±—Ä–æ–±–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ (—Ö—Ç–æ –∞–≤—Ç–æ—Ä —Ç–æ—â–æ)
@router.callback_query(lambda c: c.data.startswith("btn_5."))
async def city_callback_handler(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "btn_5.1":
        await callback_query.message.answer("üìö –í–ò–ö–û–ù–ê–í –†–û–ë–û–¢–£ –£–ß–ï–ù–¨ –ì–†–£–ü–ò –ü41 –ë–£–î–ù–ò–ô –ú–ê–¢–í–Ü–ô. üéì")
    elif data == "btn_5.2":
        await show_main_menu(callback_query.message)

# –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
@router.callback_query(lambda c: c.data == "btn_yes")
async def handle_yes_callback(callback: types.CallbackQuery):
    await callback.answer()  # –ó–Ω—ñ–º–∞—î —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∏
    await callback.message.answer("üéâ –ß—É–¥–æ–≤–æ, —â–æ –≤—Å–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è! –ù–ï –ó–ë–†–ï–•–ê–í!")

# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.callback_query(lambda c: c.data == "btn_no")
async def handle_no_callback(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("üëÅÔ∏è –ù–ï –ë–†–ï–®–ò... –Ø –ë–ê–ß–£ –í–°–ï. üïµÔ∏è‚Äç‚ôÇÔ∏è –¶–µ —Ç–æ—á–Ω–æ —Ç–≤–æ—ó –¥–∞–Ω—ñ!")

# –û–±—Ä–æ–±–∫–∞ —â–µ –æ–¥–Ω—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫–Ω–æ–ø–æ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∏—Ö—ñ–¥)
@router.callback_query(lambda c: c.data.startswith("btn_6."))
async def city_callback_handler(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "btn_6.3":
        await show_main_menu(callback_query.message)  # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
