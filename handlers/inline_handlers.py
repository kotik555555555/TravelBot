from aiogram import types, Router
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from handlers.reply_handlers import data
from keyboards.inline_keyboards import get_inline_keyboard1, get_sorting_keyboard

router = Router()


async def show_main_menu(message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ì–æ—Ç–æ–≤—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"), KeyboardButton(text="–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø–æ –º—ñ—Å—Ç–∞–º")],
            [KeyboardButton(text="–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è"), KeyboardButton(text="–ê–∫—Ü—ñ—ó")],
            [KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç–∏"), KeyboardButton(text="–ü–∞—Å—Ö–∞–ª–æ—á–∫–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=keyboard)

# Callback handler for price sorting buttons
def find_city(city_name):
    city_name = city_name.strip().lower()
    for city in data.get("cities", []):
        if city["name"].strip().lower() == city_name:
            print(f"‚úÖ –ú—ñ—Å—Ç–æ –∑–Ω–∞–π–¥–µ–Ω–æ: {city['name']}")
            return city
    print("‚ö† –ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–ø–∏—Å–∫—É!")
    return None



@router.callback_query(lambda c: c.data in ["btn_asc", "btn_desc", "btn_back"])
async def sort_callback(callback_query: types.CallbackQuery):
    sort_order = callback_query.data

    if sort_order == "btn_back":
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await callback_query.message.answer("üîô –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é.")
        await show_main_menu(callback_query.message)
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
    all_offers = [
        (city.get("name"), offer.get("title"), offer.get("price"), offer.get("description"), offer.get("image"))
        for city in data.get("cities", []) if isinstance(city, dict)
        for offer in city.get("offers", []) if isinstance(offer, dict)
    ]

    # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Ü—ñ–Ω–æ—é (–ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —á–∏—Å–ª–æ)
    reverse_order = sort_order == "btn_desc"
    all_offers.sort(key=lambda x: float(x[2]) if str(x[2]).replace('.', '', 1).isdigit() else 0, reverse=reverse_order)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
    for city_name, title, price, description, image in all_offers:
        response_text = (
            f"üìç *{city_name}: {title}*\n"
            f"üí∞ *–¶—ñ–Ω–∞:* {price} –≥—Ä–Ω\n"
            f"üìñ {description}"
        )
        if image:
            await callback_query.message.answer_photo(photo=image, caption=response_text, parse_mode="Markdown")
        else:
            await callback_query.message.answer(response_text, parse_mode="Markdown")

    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–±—ñ—Ä —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É
    await callback_query.message.answer("üìä –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=get_inline_keyboard1())



@router.callback_query(lambda c:  c.data.startswith("btn_2."))
async def city_callback_handler(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "btn_2.1":
        await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:")
    elif data == "btn_2.2":
        await callback_query.message.answer("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...")
        await show_main_menu(callback_query.message)

@router.callback_query(lambda c:  c.data.startswith("btn_3."))
async def city_callback_handler(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "btn_3.1":
        await callback_query.message.answer("–û–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:")
    elif data == "btn_3.2":
        await callback_query.message.answer("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...")
        await show_main_menu(callback_query.message)


@router.callback_query(lambda c: c.data.startswith("btn_4."))
async def city_callback_handler(callback_query: types.CallbackQuery):
    dis_data = callback_query.data  # Callback data (e.g., "btn_4.1")

    if dis_data == "btn_4.1":
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—É—Ä–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é
        offers = [
            offer
            for city in data.get("cities", [])
            if isinstance(city, dict)
            for offer in city.get("offers", [])
            if isinstance(offer, dict) and "discount" in offer
        ]
    elif dis_data == "btn_4.2":
        # –í—Å—ñ —Ç—É—Ä–∏ –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        offers = [
            offer
            for city in data.get("cities", [])
            if isinstance(city, dict)
            for offer in city.get("offers", [])
            if isinstance(offer, dict)
        ]
    else:
        return

    if offers:
        # –í–∏–±—ñ—Ä —Å–ø–æ—Å–æ–±—É —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        await callback_query.message.answer("üîΩ –í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=get_sorting_keyboard())
    else:
        await callback_query.message.answer("üî∏ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–∫—Ü—ñ–π.")
        return


@router.callback_query(lambda c: c.data.startswith("sort_"))
async def sort_callback(callback_query: types.CallbackQuery):
    if callback_query.data == "sort_back":
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        await callback_query.message.answer("üîô –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é.")
        await show_main_menu(callback_query.message)
        return

    sort_order = callback_query.data.split("_")[1]  # sort_asc –∞–±–æ sort_desc

    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç—ñ–ª—å–∫–∏ –∑ –∑–Ω–∏–∂–∫–∞–º–∏
    offers_with_discount = [
        offer
        for city in data.get("cities", [])
        if isinstance(city, dict)
        for offer in city.get("offers", [])
        if isinstance(offer, dict) and "discount" in offer
    ]

    if not offers_with_discount:
        await callback_query.message.answer("üî∏ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–∫—Ü—ñ–π.")
        return

    # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑–∞ —Ü—ñ–Ω–æ—é
    reverse_order = sort_order == "desc"
    offers_with_discount.sort(key=lambda x: float(x["price"]) if str(x["price"]).replace('.', '', 1).isdigit() else 0, reverse=reverse_order)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
    for offer in offers_with_discount:
        city_name = offer.get("city", "–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ")
        title = offer.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
        price = offer.get("price", "–ù–µ –≤–∫–∞–∑–∞–Ω–∞ —Ü—ñ–Ω–∞")
        description = offer.get("description", "–ë–µ–∑ –æ–ø–∏—Å—É")
        image = offer.get("image", None)

        response_text = (
            f"üìç *{city_name}: {title}*\n"
            f"üí∞ *–¶—ñ–Ω–∞:* {price} –≥—Ä–Ω\n"
            f"üéâ *–ó–Ω–∏–∂–∫–∞:* {offer.get('discount', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}%\n"
            f"üìñ {description}"
        )

        if image:
            await callback_query.message.answer_photo(photo=image, caption=response_text, parse_mode="Markdown", reply_markup=get_sorting_keyboard())
        else:
            await callback_query.message.answer(response_text, parse_mode="Markdown", reply_markup=get_sorting_keyboard())



@router.callback_query(lambda c:  c.data.startswith("btn_5."))
async def city_callback_handler(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "btn_5.1":
        await callback_query.message.answer("üìö –í–ò–ö–û–ù–ê–í –†–û–ë–û–¢–£ –£–ß–ï–ù–¨ –ì–†–£–ü–ò –ü41 –ë–£–î–ù–ò–ô –ú–ê–¢–í–Ü–ô. üéì")
    elif data == "btn_5.2":
        await callback_query.message.answer("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é... üè†")
        await show_main_menu(callback_query.message)
