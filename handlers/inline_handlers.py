from aiogram import types, Router
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup

from handlers.reply_handlers import data
from keyboards.inline_keyboards import get_inline_keyboard

router = Router()

# @router.callback_query(lambda c:  c.data.startswith("test_btn_"))
# async def test_callback_handler(callback_query: types.CallbackQuery):
#     data = callback_query.data
#     if data == "test_btn_1":
#         await callback_query.message.edit_text("Edited")
#         await callback_query.answer("You pressed first inline button")
#     elif data == "test_btn_2":
#         await callback_query.message.delete()
#         await callback_query.message.answer("You pressed second inline button", reply_markup=get_inline_test2())

async def show_main_menu(message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ì–æ—Ç–æ–≤—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"), KeyboardButton(text="–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø–æ –º—ñ—Å—Ç–∞–º")],
            [KeyboardButton(text="–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è"), KeyboardButton(text="–ê–∫—Ü—ñ—ó")],
            [KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç–∏"), KeyboardButton(text="–ü–∞—Å—Ö–∞–ª–æ—á–∫–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=keyboard)

# Callback handler for price sorting buttons
def find_city(city_name):
    city_name = city_name.strip().lower()
    for city in data.get("cities", []):
        if city["name"].strip().lower() == city_name:
            print(f"‚úÖ –ú—ñ—Å—Ç–æ –∑–Ω–∞–π–¥–µ–Ω–æ: {city['name']}")
            return city
    print("‚ö† –ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–ø–∏—Å–∫—É!")
    return None


def get_inline_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º", callback_data="btn_asc")],
        [InlineKeyboardButton(text="–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º", callback_data="btn_desc")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="btn_back")]
    ])
    return keyboard

def get_book_button(offer_title):
    return InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏", callback_data=f"book_{offer_title}")

@router.callback_query(lambda c: c.data in ["btn_asc", "btn_desc", "btn_back"])
async def sort_callback(callback_query: types.CallbackQuery):
    sort_order = callback_query.data
    if sort_order == "btn_back":
        # Handle "Back" button - return to the previous state or message.
        await callback_query.message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é.")
        await show_main_menu(callback_query.message)
    else:
        all_offers = []
        for city in data["cities"]:
            for offer in city["offers"]:
                all_offers.append((city["name"], offer["title"], offer["price"], offer["description"]))

        if sort_order == "btn_asc":
            all_offers.sort(key=lambda x: x[2])  # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º
        else:
            all_offers.sort(key=lambda x: x[2], reverse=True)  # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º

        for city_name, title, price, description in all_offers:
            response_text = f"üìç {city_name}: {title}\n–¶—ñ–Ω–∞: {price} –≥—Ä–Ω\n{description}"
            await callback_query.message.answer(response_text)

        await callback_query.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=get_inline_keyboard())


@router.callback_query(lambda c:  c.data.startswith("btn_2."))
async def city_callback_handler(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "btn_2.1":
        await callback_query.message.answer("–¶—ñ–Ω–∞(–∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º):")
    elif data == "btn_2.2":
        await callback_query.message.answer("–¶—ñ–Ω–∞(–∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º):")
    elif data == "btn_2.3":
        await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:")
    elif data == "btn_2.4":
        await callback_query.message.answer("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...")
        await show_main_menu(callback_query.message)

@router.callback_query(lambda c:  c.data.startswith("btn_3."))
async def city_callback_handler(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "btn_3.1":
        await callback_query.message.answer("–û–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:")
    elif data == "btn_3.2":
        await callback_query.message.answer("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...")
        await show_main_menu(callback_query.message)


@router.callback_query(lambda c: c.data.startswith("btn_4."))
async def city_callback_handler(callback_query: types.CallbackQuery):
    dis_data = callback_query.data  # Callback data (e.g., "btn_4.1")
    if dis_data == "btn_4.1":
        await callback_query.message.answer("–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–æ–Ω—é–≤–∞–ª–∏ —Ç—É—Ä.")

    # If "btn_4.2" is selected, return to the main menu
    if dis_data == "btn_4.2":
        await callback_query.message.answer("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...")
        await show_main_menu(callback_query.message)

@router.callback_query(lambda c:  c.data.startswith("btn_5."))
async def city_callback_handler(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "btn_5.1":
        await callback_query.message.answer("–í–ò–ö–û–ù–ê–í –†–û–ë–û–¢–£ –£–ß–ï–ù–¨ –ì–†–£–ü–ò –ü41 –ë–£–î–ù–ò–ô –ú–ê–¢–í–Ü–ô.")
    elif data == "btn_5.2":
        await callback_query.message.answer("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...")
        await show_main_menu(callback_query.message)

