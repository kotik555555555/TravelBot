import json

from aiogram import types, Router
from aiogram.types import FSInputFile, InlineKeyboardButton

from keyboards.inline_keyboards import get_inline_keyboard, get_inline_keyboard2, get_inline_keyboard3, get_inline_keyboard4, get_inline_keyboard5

router = Router()

with open("data.json", "r", encoding="utf-8") as file:
    data = json.load(file)

def get_book_button(offer_title):
    return InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏", callback_data=f"book_{offer_title}")


@router.message(lambda message: message.text.startswith("–ì–æ—Ç–æ–≤—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"))
async def test_handler(message: types.Message):
    all_offers = []
    for city in data["cities"]:
        for offer in city["offers"]:
            all_offers.append((city["name"], offer["title"], offer["price"], offer["description"]))

    for city_name, title, price, description in all_offers:
        response_text = f"üìç {city_name}: {title}\n–¶—ñ–Ω–∞: {price} –≥—Ä–Ω\n{description}"
        await message.answer(response_text)

    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=get_inline_keyboard())

    # Check if city name is provided


@router.message(lambda message: message.text == "–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø–æ –º—ñ—Å—Ç–∞–º")
async def test_handler(message: types.Message):
    await message.answer("""–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ —â–æ–± –∑–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—ó –≤ –Ω—å–æ–º—É:""", reply_markup=get_inline_keyboard2())


@router.message(lambda message: message.text == "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è")
async def test_handler(message: types.Message):
    await message.answer("""–¢—É—Ç –º–æ–∂–Ω–∞ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —â–æ—Å—å –Ω–∞–ø–µ—Ä–µ–¥. –ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ —â–æ –≤–∏ –∑–∞–±—Ä–æ–Ω—é–≤–∞–ª–∏:""", reply_markup=get_inline_keyboard3())


@router.message(lambda message: message.text == "–ê–∫—Ü—ñ—ó")
async def test_handler(message: types.Message):
    offers_with_discount = []

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ data —î —Å–ø–∏—Å–∫–æ–º
    if isinstance(data, dict) and "cities" in data:  # We need to check for the correct structure
        for city in data["cities"]:
            if isinstance(city, dict) and "offers" in city:  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–ª—é—á–∞ "offers"
                for offer in city["offers"]:
                    if isinstance(offer, dict) and "discount" in offer:  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–Ω–∏–∂–∫–∏
                        offers_with_discount.append(offer)

    # –Ø–∫—â–æ —î –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∑—ñ –∑–Ω–∏–∂–∫–æ—é
    if offers_with_discount:
        for offer in offers_with_discount:
            response_text = f"–¢—É—Ä: {offer['title']}\n–¶—ñ–Ω–∞: {offer['price']} –≥—Ä–Ω\n–ó–Ω–∏–∂–∫–∞: {offer['discount']}\n–û–ø–∏—Å: {offer['description']}\n"
            await message.answer(response_text, reply_markup=get_inline_keyboard4())  # Send each offer as a separate message
    else:
        await message.answer("–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–∫—Ü—ñ–π.", reply_markup=get_inline_keyboard4())


@router.message(lambda message: message.text == "–ö–æ–Ω—Ç–∞–∫—Ç–∏")
async def test_handler(message: types.Message):
    await message.answer("""–¢—É—Ç —î –∫–æ–Ω—Ç–∞–∫—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —ó—Ö.""",
                         reply_markup=get_inline_keyboard5())


@router.message(lambda message: message.text == "–ü–∞—Å—Ö–∞–ª–æ—á–∫–∞")
async def test_handler(message: types.Message):
    photo = FSInputFile(r"C:\Users\asus\Documents\GitHub\TravelBot\assets\playboi-carti-gq-december-january-2021-02.jpg")  # –ó–∞–º—ñ–Ω—ñ—Ç—å —à–ª—è—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    await message.answer_photo(photo, caption="–û—Å—å –≤–∞—à–∞ –ø–∞—Å—Ö–∞–ª–æ—á–∫–∞! üê£")
