import json
import html  # –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è HTML —Å–∏–º–≤–æ–ª—ñ–≤

from aiogram import types, Router
from aiogram.types import FSInputFile, InlineKeyboardButton

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
from keyboards.inline_keyboards import (
    get_inline_keyboard, get_inline_keyboard2, get_inline_keyboard3,
    get_inline_keyboard4, get_inline_keyboard5, get_inline_keyboard6
)

router = Router()  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ JSON-—Ñ–∞–π–ª—É
with open("data.json", "r", encoding="utf-8") as file:
    data = json.load(file)

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –∫–Ω–æ–ø–∫—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
def get_book_button(offer_title):
    return InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏", callback_data=f"book_{offer_title}")

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ "–ì–æ—Ç–æ–≤—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"
@router.message(lambda message: message.text.startswith("üéâ –ì–æ—Ç–æ–≤—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"))
async def test_handler(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∑ —É—Å—ñ—Ö –º—ñ—Å—Ç
    all_offers = [
        (city.get("name"), offer.get("title"), offer.get("price"), offer.get("description"), offer.get("image"))
        for city in data.get("cities", []) if isinstance(city, dict)
        for offer in city.get("offers", []) if isinstance(offer, dict)
    ]

    if not all_offers:
        await message.answer("‚ùå –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π.", reply_markup=get_inline_keyboard())
        return

    offer_texts = ""

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
    for city_name, title, price, description, image in all_offers:
        city_name = html.escape(str(city_name or "–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ"))
        title = html.escape(str(title or "–ë–µ–∑ –Ω–∞–∑–≤–∏"))
        price = html.escape(str(price or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"))
        description = html.escape(str(description or "–ë–µ–∑ –æ–ø–∏—Å—É"))

        offer_text = (
            f"üìç <b>{city_name}</b>: <b>{title}</b>\n"
            f"üí∞ <b>–¶—ñ–Ω–∞:</b> {price} –≥—Ä–Ω\n"
            f"üìñ {description}\n"
        )

        if image:
            offer_text += f'üñºÔ∏è <a href="{html.escape(image, quote=True)}">–§–æ—Ç–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó</a>\n'

        offer_texts += offer_text + "\n\n"

    offer_texts = offer_texts.strip()

    # –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –≤–º—ñ—â—É—î—Ç—å—Å—è –≤ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ
    if len(offer_texts) <= 4096:
        await message.answer(offer_texts, parse_mode="HTML")
    else:
        # –Ü–Ω–∞–∫—à–µ ‚Äî —Ä–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
        messages = []
        current = ""
        for block in offer_texts.split("\n\n"):
            if len(current) + len(block) + 2 <= 4096:
                current += block + "\n\n"
            else:
                messages.append(current.strip())
                current = block + "\n\n"
        if current:
            messages.append(current.strip())

        for msg in messages:
            await message.answer(msg, parse_mode="HTML")

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer("üìã –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_inline_keyboard())

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –º—ñ—Å—Ç–∞
@router.message(lambda message: message.text == "üèôÔ∏è –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø–æ –º—ñ—Å—Ç–∞–º")
async def test_handler(message: types.Message):
    await message.answer(
        "üîé –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞, —â–æ–± –∑–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—ó –≤ –Ω—å–æ–º—É:",
        reply_markup=get_inline_keyboard2()
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ä–æ–∑–¥—ñ–ª—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
@router.message(lambda message: message.text == "üõèÔ∏è –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è")
async def test_handler(message: types.Message):
    await message.answer(
        "üìã –¢—É—Ç –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.\nüñäÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å, —â–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏:",
        reply_markup=get_inline_keyboard3()
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–∫—Ü—ñ–π
@router.message(lambda message: message.text == "üéà –ê–∫—Ü—ñ—ó")
async def test_handler(message: types.Message):
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏
    offers_with_discount = [
        offer
        for city in data.get("cities", [])
        if isinstance(city, dict)
        for offer in city.get("offers", [])
        if isinstance(offer, dict) and "discount" in offer
    ]

    if offers_with_discount:
        offer_texts = ""
        for offer in offers_with_discount:
            offer_text = (
                f"üèù *{offer['title']}*\n"
                f"üí∞ *–¶—ñ–Ω–∞:* {offer['price']} –≥—Ä–Ω\n"
                f"üéâ *–ó–Ω–∏–∂–∫–∞:* {offer['discount']}%\n"
                f"üìñ *–û–ø–∏—Å:* {offer['description']}\n"
            )
            if "image" in offer and offer["image"]:
                offer_text += f"üñºÔ∏è [–§–æ—Ç–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó]({offer['image']})\n"

            offer_texts += offer_text + "\n\n"

        offer_texts = offer_texts.strip()

        if len(offer_texts) <= 4096:
            await message.answer(offer_texts, reply_markup=get_inline_keyboard4(), parse_mode="Markdown")
        else:
            for i in range(0, len(offer_texts), 4096):
                await message.answer(offer_texts[i:i + 4096], reply_markup=get_inline_keyboard4(), parse_mode="Markdown")
    else:
        await message.answer("üî∏ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–∫—Ü—ñ–π.", reply_markup=get_inline_keyboard4())

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
@router.message(lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
async def test_handler(message: types.Message):
    await message.answer(
        "üì¨ –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.\nüëá –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ:",
        reply_markup=get_inline_keyboard5()
    )

# –û–±—Ä–æ–±–Ω–∏–∫ "–ø–∞—Å—Ö–∞–ª–∫–∏"
@router.message(lambda message: message.text == "üê£ –ü–∞—Å—Ö–∞–ª–æ—á–∫–∞")
async def test_handler(message: types.Message):
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ (–ø–∞—Å—Ö–∞–ª–∫–∏)
    photo = FSInputFile("assets/playboi-carti-gq-december-january-2021-02.jpg")
    await message.answer_photo(photo, caption="–û—Å—å –≤–∞—à–∞ –ø–∞—Å—Ö–∞–ª–æ—á–∫–∞! üê£")

    user = message.from_user
    chat = message.chat

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —á–∞—Ç
    user_info = (
        f"üë§ *–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞*\n"
        f"üÜî ID: `{user.id}`\n"
        f"üë§ First name: {user.first_name or '‚Äî'}\n"
        f"üë• Last name: {user.last_name or '‚Äî'}\n"
        f"üí¨ Username: @{user.username if user.username else '–ù–µ–º–∞—î'}\n"
        f"üåê Language: {user.language_code or '‚Äî'}\n"
        f"üëë Premium: {'‚úÖ –¢–∞–∫' if getattr(user, 'is_premium', False) else '‚ùå –ù—ñ'}\n"
        f"ü§ñ Is bot: {'‚úÖ' if user.is_bot else '‚ùå'}\n"
        f"üë• Can join groups: {getattr(user, 'can_join_groups', '‚Äî')}\n"
        f"üìñ Can read all group messages: {getattr(user, 'can_read_all_group_messages', '‚Äî')}\n"
        f"üîç Supports inline queries: {getattr(user, 'supports_inline_queries', '‚Äî')}\n\n"

        f"üí¨ *–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —á–∞—Ç (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É)*\n"
        f"üìå Chat type: {chat.type}\n"
        f"üè∑Ô∏è Chat title: {chat.title or '‚Äî'}\n"
        f"üë• Chat ID: `{chat.id}`\n"
        f"üë§ Chat username: @{chat.username if chat.username else '–ù–µ–º–∞—î'}\n"
        f"üë• Is forum: {'‚úÖ' if getattr(chat, 'is_forum', False) else '‚ùå'}\n\n"

        f"üì® *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è*\n"
        f"üÜî Message ID: {message.message_id}\n"
        f"‚è∞ –î–∞—Ç–∞: {message.date}\n"
        f"üß∑ Reply to message: {'–¢–∞–∫' if message.reply_to_message else '–ù—ñ'}\n"
        f"üìé –Ñ –º–µ–¥—ñ–∞: {'–¢–∞–∫' if message.photo or message.document or message.video else '–ù—ñ'}"
    )

    await message.answer(user_info, parse_mode="Markdown")
    await message.answer("üëÄ –¶–µ *—Ç–æ—á–Ω–æ* —Ç–≤–æ—ó –¥–∞–Ω—ñ, —á–∏ –Ω–µ —Ç–∞–∫?", reply_markup=get_inline_keyboard6())