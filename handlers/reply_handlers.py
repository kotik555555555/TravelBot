import json

from aiogram import types, Router
from aiogram.types import FSInputFile, InlineKeyboardButton

from keyboards.inline_keyboards import get_inline_keyboard, get_inline_keyboard2, get_inline_keyboard3, get_inline_keyboard4, get_inline_keyboard5

router = Router()

with open("data.json", "r", encoding="utf-8") as file:
    data = json.load(file)

def get_book_button(offer_title):
    return InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏", callback_data=f"book_{offer_title}")


@router.message(lambda message: message.text.startswith("–ì–æ—Ç–æ–≤—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"))
async def test_handler(message: types.Message):
    all_offers = [
        (city.get("name"), offer.get("title"), offer.get("price"), offer.get("description"), offer.get("image"))
        for city in data.get("cities", []) if isinstance(city, dict)
        for offer in city.get("offers", []) if isinstance(offer, dict)
    ]

    if all_offers:
        for city_name, title, price, description, image in all_offers:
            response_text = (
                f"üìç *{city_name}: {title}*\n"
                f"üí∞ *–¶—ñ–Ω–∞:* {price} –≥—Ä–Ω\n"
                f"üìñ {description}"
            )
            if image:  # –Ø–∫—â–æ —î —Ñ–æ—Ç–æ, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –π–æ–≥–æ
                await message.answer_photo(photo=image, caption=response_text, parse_mode="Markdown")
            else:  # –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ–º–∞—î, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                await message.answer(response_text, parse_mode="Markdown")

        await message.answer("üìä –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=get_inline_keyboard())
    else:
        await message.answer("‚ùå –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π.", reply_markup=get_inline_keyboard())


@router.message(lambda message: message.text == "–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø–æ –º—ñ—Å—Ç–∞–º")
async def test_handler(message: types.Message):
    await message.answer("""–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ —â–æ–± –∑–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—ó –≤ –Ω—å–æ–º—É:""", reply_markup=get_inline_keyboard2())


@router.message(lambda message: message.text == "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è")
async def test_handler(message: types.Message):
    await message.answer("""–¢—É—Ç –º–æ–∂–Ω–∞ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —â–æ—Å—å –Ω–∞–ø–µ—Ä–µ–¥. –ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ —â–æ –≤–∏ –∑–∞–±—Ä–æ–Ω—é–≤–∞–ª–∏:""", reply_markup=get_inline_keyboard3())


@router.message(lambda message: message.text == "–ê–∫—Ü—ñ—ó")
async def test_handler(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∑—ñ –∑–Ω–∏–∂–∫–æ—é
    offers_with_discount = [
        offer
        for city in data.get("cities", [])
        if isinstance(city, dict)
        for offer in city.get("offers", [])
        if isinstance(offer, dict) and "discount" in offer
    ]

    if offers_with_discount:
        for offer in offers_with_discount:
            response_text = (
                f"üèù *{offer['title']}*\n"
                f"üí∞ *–¶—ñ–Ω–∞:* {offer['price']} –≥—Ä–Ω\n"
                f"üéâ *–ó–Ω–∏–∂–∫–∞:* {offer['discount']}%\n"
                f"üìñ *–û–ø–∏—Å:* {offer['description']}"
            )
            if "image" in offer and offer["image"]:  # –Ø–∫—â–æ —î –∫–∞—Ä—Ç–∏–Ω–∫–∞
                await message.answer_photo(photo=offer["image"], caption=response_text, reply_markup=get_inline_keyboard4(), parse_mode="Markdown")
            else:
                await message.answer(response_text, reply_markup=get_inline_keyboard4(), parse_mode="Markdown")
    else:
        await message.answer("üî∏ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–∫—Ü—ñ–π.", reply_markup=get_inline_keyboard4())


@router.message(lambda message: message.text == "–ö–æ–Ω—Ç–∞–∫—Ç–∏")
async def test_handler(message: types.Message):
    await message.answer("""–¢—É—Ç —î –∫–æ–Ω—Ç–∞–∫—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —ó—Ö.""",
                         reply_markup=get_inline_keyboard5())


@router.message(lambda message: message.text == "–ü–∞—Å—Ö–∞–ª–æ—á–∫–∞")
async def test_handler(message: types.Message):
    # Use baselib FileManager to manage the image path
    photo = FSInputFile("assets/playboi-carti-gq-december-january-2021-02.jpg")  # Pass the resolved file path to FSInputFile
    await message.answer_photo(photo, caption="–û—Å—å –≤–∞—à–∞ –ø–∞—Å—Ö–∞–ª–æ—á–∫–∞! üê£")
